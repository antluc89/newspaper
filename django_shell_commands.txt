>>>python manage.py shell

>>>from news.models import *

#1-создать двух пользователей (с помощью метода User.objects.create_user('username'))
>>>user1 = User.objects.create_user(username='Anton')
>>>user2 = User.objects.create_user(username='Peter')

#2-создать два обьекта модели Author, связанные с пользователями.
>>>Author.objects.create(author_user=user1)
>>>Author.objects.create(author_user=user2)

#3-добавить 4 категории в модель Category
>>>Category.objects.create(name_category='Politics')
>>>Category.objects.create(name_category='Sports')
>>>Category.objects.create(name_category='Society')
>>>Category.objects.create(name_category='Education')

#4-добавить 2 статьи и 1 новость
>>>author1 = Author.objects.get(id=1)
>>>author2 = Author.objects.get(id=2)
>>>Post.objects.create(author_post=author1, type_post='NEW', name_post='firstpost', text_post='firsttext')
>>>Post.objects.create(author_post=author1, type_post='ART', name_post='secondpost', text_post='secondtext')
>>>Post.objects.create(author_post=author2, type_post='ART', name_post='thirdpost', text_post='thirdtext')

#5-присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий)
>>>Post.objects.get(id=1).category_post.add(Category.objects.get(id=1))
>>>Post.objects.get(id=1).category_post.add(Category.objects.get(id=2))
>>>Post.objects.get(id=2).category_post.add(Category.objects.get(id=3))
>>>Post.objects.get(id=3).category_post.add(Category.objects.get(id=4))
>>>Post.objects.get(id=3).category_post.add(Category.objects.get(id=3))

#6-создать как минимум 4 комментария к разным обьектам модели Post (в каждом обьекте должен быть как минимум один комментарий)
>>>Comment.objects.create(post_comment=Post.objects.get(id=1), comment_user=Author.objects.get(id=1).author_user, text_comment='firstcomment')
>>>Comment.objects.create(post_comment=Post.objects.get(id=2), comment_user=Author.objects.get(id=1).author_user, text_comment='secondcomment')
>>>Comment.objects.create(post_comment=Post.objects.get(id=3), comment_user=Author.objects.get(id=2).author_user, text_comment='thirdcomment')
>>>Comment.objects.create(post_comment=Post.objects.get(id=3), comment_user=Author.objects.get(id=1).author_user, text_comment='fourthcomment')

#7-применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих обьектов
>>>Comment.objects.get(id=1).like()
>>>Comment.objects.get(id=2).like()
>>>Comment.objects.get(id=3).like()
>>>Comment.objects.get(id=4).like()
>>>Comment.objects.get(id=1).dislike()
>>>Comment.objects.get(id=2).dislike()
>>>Comment.objects.get(id=1).like()
>>>Comment.objects.get(id=2).like()
>>>Comment.objects.get(id=2).like()
>>>Comment.objects.get(id=3).like()
>>>Comment.objects.get(id=4).like()
>>>Comment.objects.get(id=4).like()
>>>Comment.objects.get(id=4).like()

#8-обновить рейтинги пользователей
>>>author1.update_rating()
>>>author2.update_rating()

#9-вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого обьекта)
>>>a = Author.objects.order_by('-rating_author')[:1]
>>>for i in a:
...i.author_user.username
...i.rating_author

#10-вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>>b = Post.objects.order_by('-rating')[:1]
>>>for i in b:
... i.time_post
... i.author_post.author_user.username
... i.rating_post
... i.type_post
... i.preview()

#11-вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье
>>>c = Comment.objects.filter(post_comment=b)
>>>for i in c:
... i.time_comment
... i.comment_user.username
... i.rating_comment
... i.text_comment




